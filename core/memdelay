#!/bin/bash

# To keep libs inside screen too
cd /home/minerstat/minerstat-os/core/

echo "Waiting 20..."
sleep 20

TEST=$(sudo screen -list | grep -wc minew)

until [ $TEST = 1 ]
do
  TEST=$(sudo screen -list | grep -wc minew)
  echo "Waiting miner to start..."
  sleep 1
done
# Miner up and running
echo "Miner started, wait 30 sec, then apply clocks"
sleep 5
echo "30 sec wait left.."
sleep 5
echo "20 sec wait left.."
sleep 10
echo "10 sec wait left.."
sleep 10
echo "Working on it..."


echo "Waiting until ClockTune script finishes"

TEST=$(ps aux | grep -c overclock)
until [ $TEST = 1 ]
do
  TEST=$(ps aux | grep -c overclock)
  echo "Waiting ClockTune to finish"
  sleep 1
done

echo "Converting to unique base"

sudo chmod 777 /dev/shm/nv_memcache.txt
sudo awk '!a[$0]++' /dev/shm/nv_memcache.txt > /dev/shm/nv_memcache_unique.txt
sudo chmod 777 /dev/shm/nv_memcache_unique.txt

cat /dev/shm/nv_memcache_unique.txt
READIN=$(cat /dev/shm/nv_memcache_unique.txt)


echo "Start applying .."

JOB=""

if [[ $READIN == *"ALL:"* ]]; then
  echo "Appling same memclock to all selected"
  GETCLOCK=$(cat /dev/shm/nv_memcache_unique.txt | grep "ALL:" | rev | cut -d: -f1 | rev)
  if [[ "$GETCLOCK" != "skip" ]]; then
    echo "Fetched clock is $GETCLOCK Mhz"
    JOB="-a GPUMemoryTransferRateOffset[4]="$GETCLOCK" -a GPUMemoryTransferRateOffsetAllPerformanceLevels="$GETCLOCK" -a GPUMemoryTransferRateOffset[2]="$GETCLOCK""
  fi
else
  echo "Appling memclock per gpu basis"
  while read line; do
    GETCLOCK=$(echo $line | rev | cut -d: -f1 | rev)
    GETID=$(echo $line | cut -d: -f1)
    if [[ "$GETCLOCK" != "skip" ]]; then
      echo "Fetched clock is $GETCLOCK Mhz for ID $GETID"
      JOB="$JOB -a [gpu:"$GETID"]/GPUMemoryTransferRateOffset[4]="$GETCLOCK" -a [gpu:"$GETID"]/GPUMemoryTransferRateOffsetAllPerformanceLevels="$GETCLOCK" -a [gpu:"$GETID"]/GPUMemoryTransferRateOffset[2]="$GETCLOCK""
    fi
  done </dev/shm/nv_memcache_unique.txt
fi

if [[ "$JOB" != "" ]]; then
  echo "EXECUTE: nvidia-settings --verbose -c :0 $JOB"
  sudo su minerstat -c "DISPLAY=:0 nvidia-settings --verbose -c :0 $JOB" &> /dev/shm/nvapplymclk.txt
  VALIDATE=$(cat /dev/shm/nvapplymclk.txt | sed  '/^$/d' | xargs)
  cat /dev/shm/nvapplymclk.txt | sed  '/^$/d'
  if [[ "$VALIDATE" == *"Unable to find"* ]] || [[ "$VALIDATE" == *"Unknown"* ]] || [[ -z "$VALIDATE" ]] || [[ "$VALIDATE" == *"not available"* ]]; then
    echo "Watiing 25 sec before attempting to apply again"
    sudo su -c "echo '$VALIDATE' > /dev/shm/miner.log"
    sleep 25
    # sudo su minerstat -c "DISPLAY=:0 nvidia-settings --verbose -c :0 $JOB"

    # Xorg not available error. Suspected external monitor need restart
    # WARNING: Attribute 'GPUMemoryTransferRateOffset' specified in assignment .. is not available on
    sudo killall Xorg
    sudo su -c "timeout 10 sudo screen -X -S display quit" > /dev/null
    timeout 10 screen -X -S display quit > /dev/null
    timeout 10 screen -X -S display2 quit > /dev/null
    sudo timeout 10 killall X > /dev/null
    sudo timeout 10 killall Xorg > /dev/null
    sudo timeout 5 kill -9 $(sudo pidof Xorg) > /dev/null
    sudo timeout 5 rm /tmp/.X0-lock > /dev/null

    NVIDIADEVICE=$(timeout 40 sudo lshw -C display | grep "driver=nvidia" | wc -l)
    if [ "$NVIDIADEVICE" = "0" ]; then
      NVIDIADEVICE=$(timeout 40 sudo lshw -C display | grep NVIDIA | wc -l)
    fi

    EGPU=""
    EGPU_FETCH=$(sudo timeout 10 nvidia-xconfig -A | grep -c "egpu")
    if [[ "$EGPU_FETCH" -gt 0 ]]; then
      EGPU="--egpu"
    fi

    # Remove previous xorg config
    sudo rm -f /etc/X11/xorg.conf
    sudo su -c "echo '' > /etc/X11/xorg.conf"
    sudo nvidia-xconfig --preserve-busid --preserve-driver-name
    # Generate new xorg
    if [[ "$NVIDIADEVICE" -gt 1 ]]; then
      sudo timeout 30 nvidia-xconfig -a --allow-empty-initial-configuration --cool-bits=31 --use-display-device="DFP-0" --connected-monitor="DFP-0" --custom-edid="DFP-0:/home/minerstat/minerstat-os/bin/edid.bin" --use-edid --use-edid-dpi --preserve-driver-name --preserve-busid --enable-all-gpus $EGPU
    else
      sudo timeout 30 nvidia-xconfig -a --allow-empty-initial-configuration --cool-bits=31 --use-display-device="DFP-0" --connected-monitor="DFP-0" --custom-edid="DFP-0:/home/minerstat/minerstat-os/bin/edid.bin" --use-edid --use-edid-dpi --preserve-driver-name --preserve-busid $EGPU
    fi
    sudo sed -i s/"DPMS"/"NODPMS"/ /etc/X11/xorg.conf > /dev/null
    sudo sed -i 's/UseEdid" "True"/UseEdid" "True"\n    Option         "IgnoreEDID" "False"/g' /etc/X11/xorg.conf
    sudo su minerstat -c "screen -A -m -d -S display2 sudo X :0" > /dev/null
    echo "Initalizing.. waiting for full Xorg start"
    sudo su -c "echo '$VALIDATE' > /dev/shm/miner.log"
    sleep 25

    sudo su minerstat -c "DISPLAY=:0 nvidia-settings --verbose -c :0 $JOB"
  fi
else
  echo "Job was empty"
fi
